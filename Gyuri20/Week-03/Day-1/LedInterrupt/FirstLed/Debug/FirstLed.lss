
FirstLed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ad  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071f  00000000  00000000  00000965  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000228  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  000012ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ba  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002f  00000000  00000000  000016b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000016e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__vector_3>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  7c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <__vector_3>:
#include <avr/io.h>
#include <avr/interrupt.h>

ISR(PCINT0_vect){
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
	// Toggle the LED
	PINB |= 1 << PINB5;
  8e:	1d 9a       	sbi	0x03, 5	; 3
	PINB |= 1 << PINB4;
  90:	1c 9a       	sbi	0x03, 4	; 3
	


}
  92:	0f 90       	pop	r0
  94:	0f be       	out	0x3f, r0	; 63
  96:	0f 90       	pop	r0
  98:	1f 90       	pop	r1
  9a:	18 95       	reti

0000009c <init>:
	// The button is connected to PB7 pin, which is the PCINT7 pin (PinChangeINTerrupt7 pin)
	// If we anable this interupt on every pin state changes the interrupt handler will be fired.
	// So when the button is pressed OR released the inturrupt handler will run.

	// Set the PCINT7 bit of PCMSK0 register. This will enable the interrupts from the button (PB7=PCINT7)
	PCMSK0 |= 1 << PCINT7;
  9c:	eb e6       	ldi	r30, 0x6B	; 107
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	80 83       	st	Z, r24
	
	// Enable pin interrupt on change 0 interrupts. This will enable PCINT0, PCINT1, PCINT2 ... PCINT7 interrupts.
	PCICR |= 1 << PCIE0;
  a6:	e8 e6       	ldi	r30, 0x68	; 104
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24

	// Finally, enable the interrupts globally
	sei();
  b0:	78 94       	sei

	// Set PB5 as output, this is the LED pin
	DDRB |= 1 << DDRB5;
  b2:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1 << DDRB4;
  b4:	24 9a       	sbi	0x04, 4	; 4
  b6:	08 95       	ret

000000b8 <main>:
}

int main(void)
{
	// Never forget to cal the init function if you have it :)
	init();
  b8:	0e 94 4e 00 	call	0x9c	; 0x9c <init>
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x4>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
