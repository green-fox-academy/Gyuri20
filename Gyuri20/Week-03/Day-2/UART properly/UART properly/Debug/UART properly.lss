
UART properly.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000866  000008fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080010c  0080010c  00000906  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae3  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000887  00000000  00000000  0000149b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043d  00000000  00000000  00001d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00002160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ec  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c3  00000000  00000000  0000272c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000028ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_18>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e6 e6       	ldi	r30, 0x66	; 102
  80:	f8 e0       	ldi	r31, 0x08	; 8
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 30       	cpi	r26, 0x0C	; 12
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	ac e0       	ldi	r26, 0x0C	; 12
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a3 33       	cpi	r26, 0x33	; 51
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 44 01 	call	0x288	; 0x288 <main>
  a2:	0c 94 31 04 	jmp	0x862	; 0x862 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <__vector_18>:
volatile char *rx_circ_buff_write_ptr;

//TODO: Create the read pointer of the buffer
volatile char *rx_circ_buff_read_ptr;

ISR(USART_RX_vect) {
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	2f 93       	push	r18
  b8:	3f 93       	push	r19
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
	//TODO:
	// Put received character into the circular buffer
	*rx_circ_buff_write_ptr = UDR0;
  ca:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx_circ_buff_write_ptr>
  ce:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx_circ_buff_write_ptr+0x1>
  d2:	26 ec       	ldi	r18, 0xC6	; 198
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	20 81       	ld	r18, Z
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18

	//TODO:
	// Increment the write ptr
	// Be aware that the write ptr might point to the end of the buffer.
	// In this case you have to set it back to the start of the buffer
	if(rx_circ_buff_write_ptr == rx_circ_buff_tail) {
  de:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <rx_circ_buff_write_ptr>
  e2:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <rx_circ_buff_write_ptr+0x1>
  e6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rx_circ_buff_tail>
  ea:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <rx_circ_buff_tail+0x1>
  ee:	28 17       	cp	r18, r24
  f0:	39 07       	cpc	r19, r25
  f2:	49 f4       	brne	.+18     	; 0x106 <__vector_18+0x5c>
		rx_circ_buff_write_ptr = rx_circ_buff_head;
  f4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
  f8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
  fc:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <rx_circ_buff_write_ptr+0x1>
 100:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rx_circ_buff_write_ptr>
		} else {
		rx_circ_buff_write_ptr++;
	}
}
 104:	09 c0       	rjmp	.+18     	; 0x118 <__vector_18+0x6e>
	// Be aware that the write ptr might point to the end of the buffer.
	// In this case you have to set it back to the start of the buffer
	if(rx_circ_buff_write_ptr == rx_circ_buff_tail) {
		rx_circ_buff_write_ptr = rx_circ_buff_head;
		} else {
		rx_circ_buff_write_ptr++;
 106:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx_circ_buff_write_ptr>
 10a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx_circ_buff_write_ptr+0x1>
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <rx_circ_buff_write_ptr+0x1>
 114:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rx_circ_buff_write_ptr>
	}
}
 118:	00 00       	nop
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <UART_Init>:

void UART_Init() {
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <UART_Init+0x6>
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
	// Write this function
	// See the datasheet on page 246 for hints and table 25-9.

	// At first set the baud rate to 9600
	// The CPU clock frequency is 16MHz
	uint16_t ubbr = 103;
 140:	87 e6       	ldi	r24, 0x67	; 103
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	9a 83       	std	Y+2, r25	; 0x02
 146:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = ubbr >> 8;
 148:	85 ec       	ldi	r24, 0xC5	; 197
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	29 81       	ldd	r18, Y+1	; 0x01
 14e:	3a 81       	ldd	r19, Y+2	; 0x02
 150:	23 2f       	mov	r18, r19
 152:	33 27       	eor	r19, r19
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
	UBRR0L = ubbr;
 158:	84 ec       	ldi	r24, 0xC4	; 196
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	29 81       	ldd	r18, Y+1	; 0x01
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18

	// Set the following frame format: 8N1
	// It's set by default to 8N1

	// Enable TX
	UCSR0B |= 1 << TXEN0;
 162:	81 ec       	ldi	r24, 0xC1	; 193
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	21 ec       	ldi	r18, 0xC1	; 193
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	28 60       	ori	r18, 0x08	; 8
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18

	// Enable RX
	UCSR0B |= 1 << RXEN0;
 174:	81 ec       	ldi	r24, 0xC1	; 193
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	21 ec       	ldi	r18, 0xC1	; 193
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	f9 01       	movw	r30, r18
 17e:	20 81       	ld	r18, Z
 180:	20 61       	ori	r18, 0x10	; 16
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18

	// Enable RX interrupt
	UCSR0B |= 1 << RXCIE0;
 186:	81 ec       	ldi	r24, 0xC1	; 193
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	21 ec       	ldi	r18, 0xC1	; 193
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	f9 01       	movw	r30, r18
 190:	20 81       	ld	r18, Z
 192:	20 68       	ori	r18, 0x80	; 128
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18

	//TODO:
	// Initialize circular buffer pointers, they should point to the head of the buffer
	rx_circ_buff_head = &buffer[0];
 198:	84 e1       	ldi	r24, 0x14	; 20
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 1a0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	rx_circ_buff_tail = &buffer[RX_CIRC_BUFF_LEN-1];
 1a4:	8c e2       	ldi	r24, 0x2C	; 44
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <rx_circ_buff_tail+0x1>
 1ac:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <rx_circ_buff_tail>
	rx_circ_buff_write_ptr = rx_circ_buff_head;
 1b0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1b4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1b8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <rx_circ_buff_write_ptr+0x1>
 1bc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rx_circ_buff_write_ptr>
	rx_circ_buff_read_ptr = rx_circ_buff_head;
 1c0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1c4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1c8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rx_circ_buff_read_ptr+0x1>
 1cc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx_circ_buff_read_ptr>

	// Enable interrupts globally
	sei();
 1d0:	78 94       	sei
}
 1d2:	00 00       	nop
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <UART_SendCharacter>:

void UART_SendCharacter(char character) {
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	1f 92       	push	r1
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	89 83       	std	Y+1, r24	; 0x01
	// Write this function, which can send a character through UART will polling method
	// See page 247 of the datasheet for hints, be aware that the code in the datasheet has a problem :)

	//TODO:
	// Wait for empty USART buffer register
	while ( !( UCSR0A & (1<<UDRE0)) );
 1ea:	00 00       	nop
 1ec:	80 ec       	ldi	r24, 0xC0	; 192
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	fc 01       	movw	r30, r24
 1f2:	80 81       	ld	r24, Z
 1f4:	88 2f       	mov	r24, r24
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	80 72       	andi	r24, 0x20	; 32
 1fa:	99 27       	eor	r25, r25
 1fc:	89 2b       	or	r24, r25
 1fe:	b1 f3       	breq	.-20     	; 0x1ec <UART_SendCharacter+0xe>

	//TODO:
	// Put data to USART buffer register
	UDR0 = character;
 200:	86 ec       	ldi	r24, 0xC6	; 198
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	29 81       	ldd	r18, Y+1	; 0x01
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
}
 20a:	00 00       	nop
 20c:	0f 90       	pop	r0
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <UART_GetCharacter>:

char UART_GetCharacter() {
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	1f 92       	push	r1
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
	//TODO:
	// Wait for data in the circular buffer, this can be detected if the write and read pointers are pointing to the same memory block
	while(rx_circ_buff_read_ptr == rx_circ_buff_write_ptr);
 21e:	00 00       	nop
 220:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <rx_circ_buff_read_ptr>
 224:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <rx_circ_buff_read_ptr+0x1>
 228:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx_circ_buff_write_ptr>
 22c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx_circ_buff_write_ptr+0x1>
 230:	28 17       	cp	r18, r24
 232:	39 07       	cpc	r19, r25
 234:	a9 f3       	breq	.-22     	; 0x220 <UART_GetCharacter+0xc>

	//TODO:
	// Save the data to a temporary variable
	char to_return = *rx_circ_buff_read_ptr;
 236:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_circ_buff_read_ptr>
 23a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rx_circ_buff_read_ptr+0x1>
 23e:	fc 01       	movw	r30, r24
 240:	80 81       	ld	r24, Z
 242:	89 83       	std	Y+1, r24	; 0x01

	//TODO:
	// Increment the read ptr
	// Be aware that the read ptr might point to the end of the buffer.
	// In this case you have to set it back to the start of the buffer
	if(rx_circ_buff_read_ptr == rx_circ_buff_tail) {
 244:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <rx_circ_buff_read_ptr>
 248:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <rx_circ_buff_read_ptr+0x1>
 24c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rx_circ_buff_tail>
 250:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <rx_circ_buff_tail+0x1>
 254:	28 17       	cp	r18, r24
 256:	39 07       	cpc	r19, r25
 258:	49 f4       	brne	.+18     	; 0x26c <UART_GetCharacter+0x58>
		rx_circ_buff_read_ptr = rx_circ_buff_head;
 25a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 25e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 262:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rx_circ_buff_read_ptr+0x1>
 266:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx_circ_buff_read_ptr>
 26a:	09 c0       	rjmp	.+18     	; 0x27e <UART_GetCharacter+0x6a>
		} else {
		rx_circ_buff_read_ptr++;
 26c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_circ_buff_read_ptr>
 270:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rx_circ_buff_read_ptr+0x1>
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rx_circ_buff_read_ptr+0x1>
 27a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx_circ_buff_read_ptr>
	}

	//TODO:
	// Return the read character
	return to_return;
 27e:	89 81       	ldd	r24, Y+1	; 0x01
}
 280:	0f 90       	pop	r0
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <main>:

int main(void) {
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	c7 53       	subi	r28, 0x37	; 55
 292:	d1 40       	sbci	r29, 0x01	; 1
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
	char buffer[255];

	//Don't forget to call the init function :)
	UART_Init();
 29e:	0e 94 9b 00 	call	0x136	; 0x136 <UART_Init>

	// Setting up STDIO input and output buffer
	// You don't have to understand this!
	//----- START OF STDIO IO BUFFER SETUP
	FILE UART_output = FDEV_SETUP_STREAM(UART_SendCharacter, NULL, _FDEV_SETUP_WRITE);
 2a2:	ce 01       	movw	r24, r28
 2a4:	84 5e       	subi	r24, 0xE4	; 228
 2a6:	9e 4f       	sbci	r25, 0xFE	; 254
 2a8:	2e e0       	ldi	r18, 0x0E	; 14
 2aa:	fc 01       	movw	r30, r24
 2ac:	32 2f       	mov	r19, r18
 2ae:	11 92       	st	Z+, r1
 2b0:	3a 95       	dec	r19
 2b2:	e9 f7       	brne	.-6      	; 0x2ae <main+0x26>
 2b4:	ce 01       	movw	r24, r28
 2b6:	84 5e       	subi	r24, 0xE4	; 228
 2b8:	9e 4f       	sbci	r25, 0xFE	; 254
 2ba:	22 e0       	ldi	r18, 0x02	; 2
 2bc:	fc 01       	movw	r30, r24
 2be:	23 83       	std	Z+3, r18	; 0x03
 2c0:	ce 01       	movw	r24, r28
 2c2:	84 5e       	subi	r24, 0xE4	; 228
 2c4:	9e 4f       	sbci	r25, 0xFE	; 254
 2c6:	2f ee       	ldi	r18, 0xEF	; 239
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	fc 01       	movw	r30, r24
 2cc:	31 87       	std	Z+9, r19	; 0x09
 2ce:	20 87       	std	Z+8, r18	; 0x08
	stdout = &UART_output;
 2d0:	ce 01       	movw	r24, r28
 2d2:	84 5e       	subi	r24, 0xE4	; 228
 2d4:	9e 4f       	sbci	r25, 0xFE	; 254
 2d6:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <__iob+0x3>
 2da:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <__iob+0x2>
	FILE UART_input = FDEV_SETUP_STREAM(NULL, UART_GetCharacter, _FDEV_SETUP_READ);
 2de:	ce 01       	movw	r24, r28
 2e0:	86 5d       	subi	r24, 0xD6	; 214
 2e2:	9e 4f       	sbci	r25, 0xFE	; 254
 2e4:	2e e0       	ldi	r18, 0x0E	; 14
 2e6:	fc 01       	movw	r30, r24
 2e8:	32 2f       	mov	r19, r18
 2ea:	11 92       	st	Z+, r1
 2ec:	3a 95       	dec	r19
 2ee:	e9 f7       	brne	.-6      	; 0x2ea <main+0x62>
 2f0:	ce 01       	movw	r24, r28
 2f2:	86 5d       	subi	r24, 0xD6	; 214
 2f4:	9e 4f       	sbci	r25, 0xFE	; 254
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	fc 01       	movw	r30, r24
 2fa:	23 83       	std	Z+3, r18	; 0x03
 2fc:	ce 01       	movw	r24, r28
 2fe:	86 5d       	subi	r24, 0xD6	; 214
 300:	9e 4f       	sbci	r25, 0xFE	; 254
 302:	2a e0       	ldi	r18, 0x0A	; 10
 304:	31 e0       	ldi	r19, 0x01	; 1
 306:	fc 01       	movw	r30, r24
 308:	33 87       	std	Z+11, r19	; 0x0b
 30a:	22 87       	std	Z+10, r18	; 0x0a
	stdin = &UART_input;
 30c:	ce 01       	movw	r24, r28
 30e:	86 5d       	subi	r24, 0xD6	; 214
 310:	9e 4f       	sbci	r25, 0xFE	; 254
 312:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <__iob+0x1>
 316:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <__iob>
	//----- END OF STDIO IO BUFFER SETUP

	// Try printf
	printf("Startup...\r\n");
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	0e 94 c3 03 	call	0x786	; 0x786 <puts>

	// Loop that runs forever
	while (1) {
		// With gets and puts create a loopback, use the buffer variable!
		gets(buffer);
 322:	ce 01       	movw	r24, r28
 324:	4d 96       	adiw	r24, 0x1d	; 29
 326:	0e 94 99 03 	call	0x732	; 0x732 <gets>
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	aa ef       	ldi	r26, 0xFA	; 250
 330:	b3 e4       	ldi	r27, 0x43	; 67
 332:	89 83       	std	Y+1, r24	; 0x01
 334:	9a 83       	std	Y+2, r25	; 0x02
 336:	ab 83       	std	Y+3, r26	; 0x03
 338:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	4a e7       	ldi	r20, 0x7A	; 122
 340:	55 e4       	ldi	r21, 0x45	; 69
 342:	69 81       	ldd	r22, Y+1	; 0x01
 344:	7a 81       	ldd	r23, Y+2	; 0x02
 346:	8b 81       	ldd	r24, Y+3	; 0x03
 348:	9c 81       	ldd	r25, Y+4	; 0x04
 34a:	0e 94 04 03 	call	0x608	; 0x608 <__mulsf3>
 34e:	dc 01       	movw	r26, r24
 350:	cb 01       	movw	r24, r22
 352:	8b 8b       	std	Y+19, r24	; 0x13
 354:	9c 8b       	std	Y+20, r25	; 0x14
 356:	ad 8b       	std	Y+21, r26	; 0x15
 358:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	40 e8       	ldi	r20, 0x80	; 128
 360:	5f e3       	ldi	r21, 0x3F	; 63
 362:	6b 89       	ldd	r22, Y+19	; 0x13
 364:	7c 89       	ldd	r23, Y+20	; 0x14
 366:	8d 89       	ldd	r24, Y+21	; 0x15
 368:	9e 89       	ldd	r25, Y+22	; 0x16
 36a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__cmpsf2>
 36e:	88 23       	and	r24, r24
 370:	2c f4       	brge	.+10     	; 0x37c <main+0xf4>
		__ticks = 1;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	98 8f       	std	Y+24, r25	; 0x18
 378:	8f 8b       	std	Y+23, r24	; 0x17
 37a:	3f c0       	rjmp	.+126    	; 0x3fa <main+0x172>
	else if (__tmp > 65535)
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	3f ef       	ldi	r19, 0xFF	; 255
 380:	4f e7       	ldi	r20, 0x7F	; 127
 382:	57 e4       	ldi	r21, 0x47	; 71
 384:	6b 89       	ldd	r22, Y+19	; 0x13
 386:	7c 89       	ldd	r23, Y+20	; 0x14
 388:	8d 89       	ldd	r24, Y+21	; 0x15
 38a:	9e 89       	ldd	r25, Y+22	; 0x16
 38c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__gesf2>
 390:	18 16       	cp	r1, r24
 392:	4c f5       	brge	.+82     	; 0x3e6 <main+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	40 e2       	ldi	r20, 0x20	; 32
 39a:	51 e4       	ldi	r21, 0x41	; 65
 39c:	69 81       	ldd	r22, Y+1	; 0x01
 39e:	7a 81       	ldd	r23, Y+2	; 0x02
 3a0:	8b 81       	ldd	r24, Y+3	; 0x03
 3a2:	9c 81       	ldd	r25, Y+4	; 0x04
 3a4:	0e 94 04 03 	call	0x608	; 0x608 <__mulsf3>
 3a8:	dc 01       	movw	r26, r24
 3aa:	cb 01       	movw	r24, r22
 3ac:	bc 01       	movw	r22, r24
 3ae:	cd 01       	movw	r24, r26
 3b0:	0e 94 83 02 	call	0x506	; 0x506 <__fixunssfsi>
 3b4:	dc 01       	movw	r26, r24
 3b6:	cb 01       	movw	r24, r22
 3b8:	98 8f       	std	Y+24, r25	; 0x18
 3ba:	8f 8b       	std	Y+23, r24	; 0x17
 3bc:	0f c0       	rjmp	.+30     	; 0x3dc <main+0x154>
 3be:	80 e9       	ldi	r24, 0x90	; 144
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	9a 8f       	std	Y+26, r25	; 0x1a
 3c4:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3c6:	89 8d       	ldd	r24, Y+25	; 0x19
 3c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <main+0x142>
 3ce:	9a 8f       	std	Y+26, r25	; 0x1a
 3d0:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3d2:	8f 89       	ldd	r24, Y+23	; 0x17
 3d4:	98 8d       	ldd	r25, Y+24	; 0x18
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	98 8f       	std	Y+24, r25	; 0x18
 3da:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3dc:	8f 89       	ldd	r24, Y+23	; 0x17
 3de:	98 8d       	ldd	r25, Y+24	; 0x18
 3e0:	89 2b       	or	r24, r25
 3e2:	69 f7       	brne	.-38     	; 0x3be <main+0x136>
 3e4:	14 c0       	rjmp	.+40     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3e6:	6b 89       	ldd	r22, Y+19	; 0x13
 3e8:	7c 89       	ldd	r23, Y+20	; 0x14
 3ea:	8d 89       	ldd	r24, Y+21	; 0x15
 3ec:	9e 89       	ldd	r25, Y+22	; 0x16
 3ee:	0e 94 83 02 	call	0x506	; 0x506 <__fixunssfsi>
 3f2:	dc 01       	movw	r26, r24
 3f4:	cb 01       	movw	r24, r22
 3f6:	98 8f       	std	Y+24, r25	; 0x18
 3f8:	8f 8b       	std	Y+23, r24	; 0x17
 3fa:	8f 89       	ldd	r24, Y+23	; 0x17
 3fc:	98 8d       	ldd	r25, Y+24	; 0x18
 3fe:	9c 8f       	std	Y+28, r25	; 0x1c
 400:	8b 8f       	std	Y+27, r24	; 0x1b
 402:	8b 8d       	ldd	r24, Y+27	; 0x1b
 404:	9c 8d       	ldd	r25, Y+28	; 0x1c
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40a:	9c 8f       	std	Y+28, r25	; 0x1c
 40c:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(500);
		puts(buffer);
 40e:	ce 01       	movw	r24, r28
 410:	4d 96       	adiw	r24, 0x1d	; 29
 412:	0e 94 c3 03 	call	0x786	; 0x786 <puts>
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	aa ef       	ldi	r26, 0xFA	; 250
 41c:	b3 e4       	ldi	r27, 0x43	; 67
 41e:	8d 83       	std	Y+5, r24	; 0x05
 420:	9e 83       	std	Y+6, r25	; 0x06
 422:	af 83       	std	Y+7, r26	; 0x07
 424:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	4a e7       	ldi	r20, 0x7A	; 122
 42c:	55 e4       	ldi	r21, 0x45	; 69
 42e:	6d 81       	ldd	r22, Y+5	; 0x05
 430:	7e 81       	ldd	r23, Y+6	; 0x06
 432:	8f 81       	ldd	r24, Y+7	; 0x07
 434:	98 85       	ldd	r25, Y+8	; 0x08
 436:	0e 94 04 03 	call	0x608	; 0x608 <__mulsf3>
 43a:	dc 01       	movw	r26, r24
 43c:	cb 01       	movw	r24, r22
 43e:	89 87       	std	Y+9, r24	; 0x09
 440:	9a 87       	std	Y+10, r25	; 0x0a
 442:	ab 87       	std	Y+11, r26	; 0x0b
 444:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	40 e8       	ldi	r20, 0x80	; 128
 44c:	5f e3       	ldi	r21, 0x3F	; 63
 44e:	69 85       	ldd	r22, Y+9	; 0x09
 450:	7a 85       	ldd	r23, Y+10	; 0x0a
 452:	8b 85       	ldd	r24, Y+11	; 0x0b
 454:	9c 85       	ldd	r25, Y+12	; 0x0c
 456:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__cmpsf2>
 45a:	88 23       	and	r24, r24
 45c:	2c f4       	brge	.+10     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		__ticks = 1;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	9e 87       	std	Y+14, r25	; 0x0e
 464:	8d 87       	std	Y+13, r24	; 0x0d
 466:	3f c0       	rjmp	.+126    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
	else if (__tmp > 65535)
 468:	20 e0       	ldi	r18, 0x00	; 0
 46a:	3f ef       	ldi	r19, 0xFF	; 255
 46c:	4f e7       	ldi	r20, 0x7F	; 127
 46e:	57 e4       	ldi	r21, 0x47	; 71
 470:	69 85       	ldd	r22, Y+9	; 0x09
 472:	7a 85       	ldd	r23, Y+10	; 0x0a
 474:	8b 85       	ldd	r24, Y+11	; 0x0b
 476:	9c 85       	ldd	r25, Y+12	; 0x0c
 478:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__gesf2>
 47c:	18 16       	cp	r1, r24
 47e:	4c f5       	brge	.+82     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	40 e2       	ldi	r20, 0x20	; 32
 486:	51 e4       	ldi	r21, 0x41	; 65
 488:	6d 81       	ldd	r22, Y+5	; 0x05
 48a:	7e 81       	ldd	r23, Y+6	; 0x06
 48c:	8f 81       	ldd	r24, Y+7	; 0x07
 48e:	98 85       	ldd	r25, Y+8	; 0x08
 490:	0e 94 04 03 	call	0x608	; 0x608 <__mulsf3>
 494:	dc 01       	movw	r26, r24
 496:	cb 01       	movw	r24, r22
 498:	bc 01       	movw	r22, r24
 49a:	cd 01       	movw	r24, r26
 49c:	0e 94 83 02 	call	0x506	; 0x506 <__fixunssfsi>
 4a0:	dc 01       	movw	r26, r24
 4a2:	cb 01       	movw	r24, r22
 4a4:	9e 87       	std	Y+14, r25	; 0x0e
 4a6:	8d 87       	std	Y+13, r24	; 0x0d
 4a8:	0f c0       	rjmp	.+30     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4aa:	80 e9       	ldi	r24, 0x90	; 144
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	98 8b       	std	Y+16, r25	; 0x10
 4b0:	8f 87       	std	Y+15, r24	; 0x0f
 4b2:	8f 85       	ldd	r24, Y+15	; 0x0f
 4b4:	98 89       	ldd	r25, Y+16	; 0x10
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4ba:	98 8b       	std	Y+16, r25	; 0x10
 4bc:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4be:	8d 85       	ldd	r24, Y+13	; 0x0d
 4c0:	9e 85       	ldd	r25, Y+14	; 0x0e
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	9e 87       	std	Y+14, r25	; 0x0e
 4c6:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4c8:	8d 85       	ldd	r24, Y+13	; 0x0d
 4ca:	9e 85       	ldd	r25, Y+14	; 0x0e
 4cc:	89 2b       	or	r24, r25
 4ce:	69 f7       	brne	.-38     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4d0:	14 c0       	rjmp	.+40     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4d2:	69 85       	ldd	r22, Y+9	; 0x09
 4d4:	7a 85       	ldd	r23, Y+10	; 0x0a
 4d6:	8b 85       	ldd	r24, Y+11	; 0x0b
 4d8:	9c 85       	ldd	r25, Y+12	; 0x0c
 4da:	0e 94 83 02 	call	0x506	; 0x506 <__fixunssfsi>
 4de:	dc 01       	movw	r26, r24
 4e0:	cb 01       	movw	r24, r22
 4e2:	9e 87       	std	Y+14, r25	; 0x0e
 4e4:	8d 87       	std	Y+13, r24	; 0x0d
 4e6:	8d 85       	ldd	r24, Y+13	; 0x0d
 4e8:	9e 85       	ldd	r25, Y+14	; 0x0e
 4ea:	9a 8b       	std	Y+18, r25	; 0x12
 4ec:	89 8b       	std	Y+17, r24	; 0x11
 4ee:	89 89       	ldd	r24, Y+17	; 0x11
 4f0:	9a 89       	ldd	r25, Y+18	; 0x12
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f6:	9a 8b       	std	Y+18, r25	; 0x12
 4f8:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(500);
	}
 4fa:	13 cf       	rjmp	.-474    	; 0x322 <main+0x9a>

000004fc <__cmpsf2>:
 4fc:	0e 94 b2 02 	call	0x564	; 0x564 <__fp_cmp>
 500:	08 f4       	brcc	.+2      	; 0x504 <__stack+0x5>
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	08 95       	ret

00000506 <__fixunssfsi>:
 506:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_splitA>
 50a:	88 f0       	brcs	.+34     	; 0x52e <__fixunssfsi+0x28>
 50c:	9f 57       	subi	r25, 0x7F	; 127
 50e:	98 f0       	brcs	.+38     	; 0x536 <__fixunssfsi+0x30>
 510:	b9 2f       	mov	r27, r25
 512:	99 27       	eor	r25, r25
 514:	b7 51       	subi	r27, 0x17	; 23
 516:	b0 f0       	brcs	.+44     	; 0x544 <__fixunssfsi+0x3e>
 518:	e1 f0       	breq	.+56     	; 0x552 <__fixunssfsi+0x4c>
 51a:	66 0f       	add	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	88 1f       	adc	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	1a f0       	brmi	.+6      	; 0x52a <__fixunssfsi+0x24>
 524:	ba 95       	dec	r27
 526:	c9 f7       	brne	.-14     	; 0x51a <__fixunssfsi+0x14>
 528:	14 c0       	rjmp	.+40     	; 0x552 <__fixunssfsi+0x4c>
 52a:	b1 30       	cpi	r27, 0x01	; 1
 52c:	91 f0       	breq	.+36     	; 0x552 <__fixunssfsi+0x4c>
 52e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fp_zero>
 532:	b1 e0       	ldi	r27, 0x01	; 1
 534:	08 95       	ret
 536:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__fp_zero>
 53a:	67 2f       	mov	r22, r23
 53c:	78 2f       	mov	r23, r24
 53e:	88 27       	eor	r24, r24
 540:	b8 5f       	subi	r27, 0xF8	; 248
 542:	39 f0       	breq	.+14     	; 0x552 <__fixunssfsi+0x4c>
 544:	b9 3f       	cpi	r27, 0xF9	; 249
 546:	cc f3       	brlt	.-14     	; 0x53a <__fixunssfsi+0x34>
 548:	86 95       	lsr	r24
 54a:	77 95       	ror	r23
 54c:	67 95       	ror	r22
 54e:	b3 95       	inc	r27
 550:	d9 f7       	brne	.-10     	; 0x548 <__fixunssfsi+0x42>
 552:	3e f4       	brtc	.+14     	; 0x562 <__fixunssfsi+0x5c>
 554:	90 95       	com	r25
 556:	80 95       	com	r24
 558:	70 95       	com	r23
 55a:	61 95       	neg	r22
 55c:	7f 4f       	sbci	r23, 0xFF	; 255
 55e:	8f 4f       	sbci	r24, 0xFF	; 255
 560:	9f 4f       	sbci	r25, 0xFF	; 255
 562:	08 95       	ret

00000564 <__fp_cmp>:
 564:	99 0f       	add	r25, r25
 566:	00 08       	sbc	r0, r0
 568:	55 0f       	add	r21, r21
 56a:	aa 0b       	sbc	r26, r26
 56c:	e0 e8       	ldi	r30, 0x80	; 128
 56e:	fe ef       	ldi	r31, 0xFE	; 254
 570:	16 16       	cp	r1, r22
 572:	17 06       	cpc	r1, r23
 574:	e8 07       	cpc	r30, r24
 576:	f9 07       	cpc	r31, r25
 578:	c0 f0       	brcs	.+48     	; 0x5aa <__fp_cmp+0x46>
 57a:	12 16       	cp	r1, r18
 57c:	13 06       	cpc	r1, r19
 57e:	e4 07       	cpc	r30, r20
 580:	f5 07       	cpc	r31, r21
 582:	98 f0       	brcs	.+38     	; 0x5aa <__fp_cmp+0x46>
 584:	62 1b       	sub	r22, r18
 586:	73 0b       	sbc	r23, r19
 588:	84 0b       	sbc	r24, r20
 58a:	95 0b       	sbc	r25, r21
 58c:	39 f4       	brne	.+14     	; 0x59c <__fp_cmp+0x38>
 58e:	0a 26       	eor	r0, r26
 590:	61 f0       	breq	.+24     	; 0x5aa <__fp_cmp+0x46>
 592:	23 2b       	or	r18, r19
 594:	24 2b       	or	r18, r20
 596:	25 2b       	or	r18, r21
 598:	21 f4       	brne	.+8      	; 0x5a2 <__fp_cmp+0x3e>
 59a:	08 95       	ret
 59c:	0a 26       	eor	r0, r26
 59e:	09 f4       	brne	.+2      	; 0x5a2 <__fp_cmp+0x3e>
 5a0:	a1 40       	sbci	r26, 0x01	; 1
 5a2:	a6 95       	lsr	r26
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	81 1d       	adc	r24, r1
 5a8:	81 1d       	adc	r24, r1
 5aa:	08 95       	ret

000005ac <__fp_split3>:
 5ac:	57 fd       	sbrc	r21, 7
 5ae:	90 58       	subi	r25, 0x80	; 128
 5b0:	44 0f       	add	r20, r20
 5b2:	55 1f       	adc	r21, r21
 5b4:	59 f0       	breq	.+22     	; 0x5cc <__fp_splitA+0x10>
 5b6:	5f 3f       	cpi	r21, 0xFF	; 255
 5b8:	71 f0       	breq	.+28     	; 0x5d6 <__fp_splitA+0x1a>
 5ba:	47 95       	ror	r20

000005bc <__fp_splitA>:
 5bc:	88 0f       	add	r24, r24
 5be:	97 fb       	bst	r25, 7
 5c0:	99 1f       	adc	r25, r25
 5c2:	61 f0       	breq	.+24     	; 0x5dc <__fp_splitA+0x20>
 5c4:	9f 3f       	cpi	r25, 0xFF	; 255
 5c6:	79 f0       	breq	.+30     	; 0x5e6 <__fp_splitA+0x2a>
 5c8:	87 95       	ror	r24
 5ca:	08 95       	ret
 5cc:	12 16       	cp	r1, r18
 5ce:	13 06       	cpc	r1, r19
 5d0:	14 06       	cpc	r1, r20
 5d2:	55 1f       	adc	r21, r21
 5d4:	f2 cf       	rjmp	.-28     	; 0x5ba <__fp_split3+0xe>
 5d6:	46 95       	lsr	r20
 5d8:	f1 df       	rcall	.-30     	; 0x5bc <__fp_splitA>
 5da:	08 c0       	rjmp	.+16     	; 0x5ec <__fp_splitA+0x30>
 5dc:	16 16       	cp	r1, r22
 5de:	17 06       	cpc	r1, r23
 5e0:	18 06       	cpc	r1, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	f1 cf       	rjmp	.-30     	; 0x5c8 <__fp_splitA+0xc>
 5e6:	86 95       	lsr	r24
 5e8:	71 05       	cpc	r23, r1
 5ea:	61 05       	cpc	r22, r1
 5ec:	08 94       	sec
 5ee:	08 95       	ret

000005f0 <__fp_zero>:
 5f0:	e8 94       	clt

000005f2 <__fp_szero>:
 5f2:	bb 27       	eor	r27, r27
 5f4:	66 27       	eor	r22, r22
 5f6:	77 27       	eor	r23, r23
 5f8:	cb 01       	movw	r24, r22
 5fa:	97 f9       	bld	r25, 7
 5fc:	08 95       	ret

000005fe <__gesf2>:
 5fe:	0e 94 b2 02 	call	0x564	; 0x564 <__fp_cmp>
 602:	08 f4       	brcc	.+2      	; 0x606 <__gesf2+0x8>
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	08 95       	ret

00000608 <__mulsf3>:
 608:	0e 94 17 03 	call	0x62e	; 0x62e <__mulsf3x>
 60c:	0c 94 88 03 	jmp	0x710	; 0x710 <__fp_round>
 610:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fp_pscA>
 614:	38 f0       	brcs	.+14     	; 0x624 <__mulsf3+0x1c>
 616:	0e 94 81 03 	call	0x702	; 0x702 <__fp_pscB>
 61a:	20 f0       	brcs	.+8      	; 0x624 <__mulsf3+0x1c>
 61c:	95 23       	and	r25, r21
 61e:	11 f0       	breq	.+4      	; 0x624 <__mulsf3+0x1c>
 620:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_inf>
 624:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_nan>
 628:	11 24       	eor	r1, r1
 62a:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__fp_szero>

0000062e <__mulsf3x>:
 62e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__fp_split3>
 632:	70 f3       	brcs	.-36     	; 0x610 <__mulsf3+0x8>

00000634 <__mulsf3_pse>:
 634:	95 9f       	mul	r25, r21
 636:	c1 f3       	breq	.-16     	; 0x628 <__mulsf3+0x20>
 638:	95 0f       	add	r25, r21
 63a:	50 e0       	ldi	r21, 0x00	; 0
 63c:	55 1f       	adc	r21, r21
 63e:	62 9f       	mul	r22, r18
 640:	f0 01       	movw	r30, r0
 642:	72 9f       	mul	r23, r18
 644:	bb 27       	eor	r27, r27
 646:	f0 0d       	add	r31, r0
 648:	b1 1d       	adc	r27, r1
 64a:	63 9f       	mul	r22, r19
 64c:	aa 27       	eor	r26, r26
 64e:	f0 0d       	add	r31, r0
 650:	b1 1d       	adc	r27, r1
 652:	aa 1f       	adc	r26, r26
 654:	64 9f       	mul	r22, r20
 656:	66 27       	eor	r22, r22
 658:	b0 0d       	add	r27, r0
 65a:	a1 1d       	adc	r26, r1
 65c:	66 1f       	adc	r22, r22
 65e:	82 9f       	mul	r24, r18
 660:	22 27       	eor	r18, r18
 662:	b0 0d       	add	r27, r0
 664:	a1 1d       	adc	r26, r1
 666:	62 1f       	adc	r22, r18
 668:	73 9f       	mul	r23, r19
 66a:	b0 0d       	add	r27, r0
 66c:	a1 1d       	adc	r26, r1
 66e:	62 1f       	adc	r22, r18
 670:	83 9f       	mul	r24, r19
 672:	a0 0d       	add	r26, r0
 674:	61 1d       	adc	r22, r1
 676:	22 1f       	adc	r18, r18
 678:	74 9f       	mul	r23, r20
 67a:	33 27       	eor	r19, r19
 67c:	a0 0d       	add	r26, r0
 67e:	61 1d       	adc	r22, r1
 680:	23 1f       	adc	r18, r19
 682:	84 9f       	mul	r24, r20
 684:	60 0d       	add	r22, r0
 686:	21 1d       	adc	r18, r1
 688:	82 2f       	mov	r24, r18
 68a:	76 2f       	mov	r23, r22
 68c:	6a 2f       	mov	r22, r26
 68e:	11 24       	eor	r1, r1
 690:	9f 57       	subi	r25, 0x7F	; 127
 692:	50 40       	sbci	r21, 0x00	; 0
 694:	9a f0       	brmi	.+38     	; 0x6bc <__mulsf3_pse+0x88>
 696:	f1 f0       	breq	.+60     	; 0x6d4 <__mulsf3_pse+0xa0>
 698:	88 23       	and	r24, r24
 69a:	4a f0       	brmi	.+18     	; 0x6ae <__mulsf3_pse+0x7a>
 69c:	ee 0f       	add	r30, r30
 69e:	ff 1f       	adc	r31, r31
 6a0:	bb 1f       	adc	r27, r27
 6a2:	66 1f       	adc	r22, r22
 6a4:	77 1f       	adc	r23, r23
 6a6:	88 1f       	adc	r24, r24
 6a8:	91 50       	subi	r25, 0x01	; 1
 6aa:	50 40       	sbci	r21, 0x00	; 0
 6ac:	a9 f7       	brne	.-22     	; 0x698 <__mulsf3_pse+0x64>
 6ae:	9e 3f       	cpi	r25, 0xFE	; 254
 6b0:	51 05       	cpc	r21, r1
 6b2:	80 f0       	brcs	.+32     	; 0x6d4 <__mulsf3_pse+0xa0>
 6b4:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_inf>
 6b8:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__fp_szero>
 6bc:	5f 3f       	cpi	r21, 0xFF	; 255
 6be:	e4 f3       	brlt	.-8      	; 0x6b8 <__mulsf3_pse+0x84>
 6c0:	98 3e       	cpi	r25, 0xE8	; 232
 6c2:	d4 f3       	brlt	.-12     	; 0x6b8 <__mulsf3_pse+0x84>
 6c4:	86 95       	lsr	r24
 6c6:	77 95       	ror	r23
 6c8:	67 95       	ror	r22
 6ca:	b7 95       	ror	r27
 6cc:	f7 95       	ror	r31
 6ce:	e7 95       	ror	r30
 6d0:	9f 5f       	subi	r25, 0xFF	; 255
 6d2:	c1 f7       	brne	.-16     	; 0x6c4 <__mulsf3_pse+0x90>
 6d4:	fe 2b       	or	r31, r30
 6d6:	88 0f       	add	r24, r24
 6d8:	91 1d       	adc	r25, r1
 6da:	96 95       	lsr	r25
 6dc:	87 95       	ror	r24
 6de:	97 f9       	bld	r25, 7
 6e0:	08 95       	ret

000006e2 <__fp_inf>:
 6e2:	97 f9       	bld	r25, 7
 6e4:	9f 67       	ori	r25, 0x7F	; 127
 6e6:	80 e8       	ldi	r24, 0x80	; 128
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	08 95       	ret

000006ee <__fp_nan>:
 6ee:	9f ef       	ldi	r25, 0xFF	; 255
 6f0:	80 ec       	ldi	r24, 0xC0	; 192
 6f2:	08 95       	ret

000006f4 <__fp_pscA>:
 6f4:	00 24       	eor	r0, r0
 6f6:	0a 94       	dec	r0
 6f8:	16 16       	cp	r1, r22
 6fa:	17 06       	cpc	r1, r23
 6fc:	18 06       	cpc	r1, r24
 6fe:	09 06       	cpc	r0, r25
 700:	08 95       	ret

00000702 <__fp_pscB>:
 702:	00 24       	eor	r0, r0
 704:	0a 94       	dec	r0
 706:	12 16       	cp	r1, r18
 708:	13 06       	cpc	r1, r19
 70a:	14 06       	cpc	r1, r20
 70c:	05 06       	cpc	r0, r21
 70e:	08 95       	ret

00000710 <__fp_round>:
 710:	09 2e       	mov	r0, r25
 712:	03 94       	inc	r0
 714:	00 0c       	add	r0, r0
 716:	11 f4       	brne	.+4      	; 0x71c <__fp_round+0xc>
 718:	88 23       	and	r24, r24
 71a:	52 f0       	brmi	.+20     	; 0x730 <__fp_round+0x20>
 71c:	bb 0f       	add	r27, r27
 71e:	40 f4       	brcc	.+16     	; 0x730 <__fp_round+0x20>
 720:	bf 2b       	or	r27, r31
 722:	11 f4       	brne	.+4      	; 0x728 <__fp_round+0x18>
 724:	60 ff       	sbrs	r22, 0
 726:	04 c0       	rjmp	.+8      	; 0x730 <__fp_round+0x20>
 728:	6f 5f       	subi	r22, 0xFF	; 255
 72a:	7f 4f       	sbci	r23, 0xFF	; 255
 72c:	8f 4f       	sbci	r24, 0xFF	; 255
 72e:	9f 4f       	sbci	r25, 0xFF	; 255
 730:	08 95       	ret

00000732 <gets>:
 732:	0f 93       	push	r16
 734:	1f 93       	push	r17
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <__iob>
 73e:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <__iob+0x1>
 742:	23 81       	ldd	r18, Z+3	; 0x03
 744:	20 fd       	sbrc	r18, 0
 746:	03 c0       	rjmp	.+6      	; 0x74e <gets+0x1c>
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	17 c0       	rjmp	.+46     	; 0x77c <gets+0x4a>
 74e:	c9 2f       	mov	r28, r25
 750:	d8 2f       	mov	r29, r24
 752:	08 2f       	mov	r16, r24
 754:	19 2f       	mov	r17, r25
 756:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <__iob>
 75a:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <__iob+0x1>
 75e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <fgetc>
 762:	8f 3f       	cpi	r24, 0xFF	; 255
 764:	2f ef       	ldi	r18, 0xFF	; 255
 766:	92 07       	cpc	r25, r18
 768:	79 f3       	breq	.-34     	; 0x748 <gets+0x16>
 76a:	f8 01       	movw	r30, r16
 76c:	81 93       	st	Z+, r24
 76e:	8f 01       	movw	r16, r30
 770:	0a 97       	sbiw	r24, 0x0a	; 10
 772:	89 f7       	brne	.-30     	; 0x756 <gets+0x24>
 774:	31 97       	sbiw	r30, 0x01	; 1
 776:	10 82       	st	Z, r1
 778:	8d 2f       	mov	r24, r29
 77a:	9c 2f       	mov	r25, r28
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	1f 91       	pop	r17
 782:	0f 91       	pop	r16
 784:	08 95       	ret

00000786 <puts>:
 786:	0f 93       	push	r16
 788:	1f 93       	push	r17
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <__iob+0x2>
 792:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <__iob+0x3>
 796:	23 81       	ldd	r18, Z+3	; 0x03
 798:	21 ff       	sbrs	r18, 1
 79a:	1b c0       	rjmp	.+54     	; 0x7d2 <puts+0x4c>
 79c:	8c 01       	movw	r16, r24
 79e:	d0 e0       	ldi	r29, 0x00	; 0
 7a0:	c0 e0       	ldi	r28, 0x00	; 0
 7a2:	f8 01       	movw	r30, r16
 7a4:	81 91       	ld	r24, Z+
 7a6:	8f 01       	movw	r16, r30
 7a8:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <__iob+0x2>
 7ac:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <__iob+0x3>
 7b0:	db 01       	movw	r26, r22
 7b2:	18 96       	adiw	r26, 0x08	; 8
 7b4:	ed 91       	ld	r30, X+
 7b6:	fc 91       	ld	r31, X
 7b8:	19 97       	sbiw	r26, 0x09	; 9
 7ba:	88 23       	and	r24, r24
 7bc:	31 f0       	breq	.+12     	; 0x7ca <puts+0x44>
 7be:	09 95       	icall
 7c0:	89 2b       	or	r24, r25
 7c2:	79 f3       	breq	.-34     	; 0x7a2 <puts+0x1c>
 7c4:	df ef       	ldi	r29, 0xFF	; 255
 7c6:	cf ef       	ldi	r28, 0xFF	; 255
 7c8:	ec cf       	rjmp	.-40     	; 0x7a2 <puts+0x1c>
 7ca:	8a e0       	ldi	r24, 0x0A	; 10
 7cc:	09 95       	icall
 7ce:	89 2b       	or	r24, r25
 7d0:	19 f0       	breq	.+6      	; 0x7d8 <puts+0x52>
 7d2:	8f ef       	ldi	r24, 0xFF	; 255
 7d4:	9f ef       	ldi	r25, 0xFF	; 255
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <puts+0x56>
 7d8:	8d 2f       	mov	r24, r29
 7da:	9c 2f       	mov	r25, r28
 7dc:	df 91       	pop	r29
 7de:	cf 91       	pop	r28
 7e0:	1f 91       	pop	r17
 7e2:	0f 91       	pop	r16
 7e4:	08 95       	ret

000007e6 <fgetc>:
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	ec 01       	movw	r28, r24
 7ec:	2b 81       	ldd	r18, Y+3	; 0x03
 7ee:	20 ff       	sbrs	r18, 0
 7f0:	33 c0       	rjmp	.+102    	; 0x858 <fgetc+0x72>
 7f2:	26 ff       	sbrs	r18, 6
 7f4:	0a c0       	rjmp	.+20     	; 0x80a <fgetc+0x24>
 7f6:	2f 7b       	andi	r18, 0xBF	; 191
 7f8:	2b 83       	std	Y+3, r18	; 0x03
 7fa:	8e 81       	ldd	r24, Y+6	; 0x06
 7fc:	9f 81       	ldd	r25, Y+7	; 0x07
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	9f 83       	std	Y+7, r25	; 0x07
 802:	8e 83       	std	Y+6, r24	; 0x06
 804:	8a 81       	ldd	r24, Y+2	; 0x02
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	29 c0       	rjmp	.+82     	; 0x85c <fgetc+0x76>
 80a:	22 ff       	sbrs	r18, 2
 80c:	0f c0       	rjmp	.+30     	; 0x82c <fgetc+0x46>
 80e:	e8 81       	ld	r30, Y
 810:	f9 81       	ldd	r31, Y+1	; 0x01
 812:	80 81       	ld	r24, Z
 814:	08 2e       	mov	r0, r24
 816:	00 0c       	add	r0, r0
 818:	99 0b       	sbc	r25, r25
 81a:	00 97       	sbiw	r24, 0x00	; 0
 81c:	19 f4       	brne	.+6      	; 0x824 <fgetc+0x3e>
 81e:	20 62       	ori	r18, 0x20	; 32
 820:	2b 83       	std	Y+3, r18	; 0x03
 822:	1a c0       	rjmp	.+52     	; 0x858 <fgetc+0x72>
 824:	31 96       	adiw	r30, 0x01	; 1
 826:	f9 83       	std	Y+1, r31	; 0x01
 828:	e8 83       	st	Y, r30
 82a:	0e c0       	rjmp	.+28     	; 0x848 <fgetc+0x62>
 82c:	ea 85       	ldd	r30, Y+10	; 0x0a
 82e:	fb 85       	ldd	r31, Y+11	; 0x0b
 830:	09 95       	icall
 832:	97 ff       	sbrs	r25, 7
 834:	09 c0       	rjmp	.+18     	; 0x848 <fgetc+0x62>
 836:	2b 81       	ldd	r18, Y+3	; 0x03
 838:	01 96       	adiw	r24, 0x01	; 1
 83a:	11 f0       	breq	.+4      	; 0x840 <fgetc+0x5a>
 83c:	80 e2       	ldi	r24, 0x20	; 32
 83e:	01 c0       	rjmp	.+2      	; 0x842 <fgetc+0x5c>
 840:	80 e1       	ldi	r24, 0x10	; 16
 842:	82 2b       	or	r24, r18
 844:	8b 83       	std	Y+3, r24	; 0x03
 846:	08 c0       	rjmp	.+16     	; 0x858 <fgetc+0x72>
 848:	2e 81       	ldd	r18, Y+6	; 0x06
 84a:	3f 81       	ldd	r19, Y+7	; 0x07
 84c:	2f 5f       	subi	r18, 0xFF	; 255
 84e:	3f 4f       	sbci	r19, 0xFF	; 255
 850:	3f 83       	std	Y+7, r19	; 0x07
 852:	2e 83       	std	Y+6, r18	; 0x06
 854:	99 27       	eor	r25, r25
 856:	02 c0       	rjmp	.+4      	; 0x85c <fgetc+0x76>
 858:	8f ef       	ldi	r24, 0xFF	; 255
 85a:	9f ef       	ldi	r25, 0xFF	; 255
 85c:	df 91       	pop	r29
 85e:	cf 91       	pop	r28
 860:	08 95       	ret

00000862 <_exit>:
 862:	f8 94       	cli

00000864 <__stop_program>:
 864:	ff cf       	rjmp	.-2      	; 0x864 <__stop_program>
