
MEGA_LED_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c4f  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000955  00000000  00000000  00000df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a2e  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  0000217c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000f78e  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  00011952  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000119ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003794  00000000  00000000  000119ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	35 c0       	rjmp	.+106    	; 0x6c <__ctors_end>
   2:	00 00       	nop
   4:	3b c0       	rjmp	.+118    	; 0x7c <__bad_interrupt>
   6:	00 00       	nop
   8:	39 c0       	rjmp	.+114    	; 0x7c <__bad_interrupt>
   a:	00 00       	nop
   c:	37 c0       	rjmp	.+110    	; 0x7c <__bad_interrupt>
   e:	00 00       	nop
  10:	35 c0       	rjmp	.+106    	; 0x7c <__bad_interrupt>
  12:	00 00       	nop
  14:	33 c0       	rjmp	.+102    	; 0x7c <__bad_interrupt>
  16:	00 00       	nop
  18:	31 c0       	rjmp	.+98     	; 0x7c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2f c0       	rjmp	.+94     	; 0x7c <__bad_interrupt>
  1e:	00 00       	nop
  20:	2d c0       	rjmp	.+90     	; 0x7c <__bad_interrupt>
  22:	00 00       	nop
  24:	2b c0       	rjmp	.+86     	; 0x7c <__bad_interrupt>
  26:	00 00       	nop
  28:	29 c0       	rjmp	.+82     	; 0x7c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	27 c0       	rjmp	.+78     	; 0x7c <__bad_interrupt>
  2e:	00 00       	nop
  30:	25 c0       	rjmp	.+74     	; 0x7c <__bad_interrupt>
  32:	00 00       	nop
  34:	23 c0       	rjmp	.+70     	; 0x7c <__bad_interrupt>
  36:	00 00       	nop
  38:	21 c0       	rjmp	.+66     	; 0x7c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1f c0       	rjmp	.+62     	; 0x7c <__bad_interrupt>
  3e:	00 00       	nop
  40:	1d c0       	rjmp	.+58     	; 0x7c <__bad_interrupt>
  42:	00 00       	nop
  44:	1b c0       	rjmp	.+54     	; 0x7c <__bad_interrupt>
  46:	00 00       	nop
  48:	19 c0       	rjmp	.+50     	; 0x7c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	17 c0       	rjmp	.+46     	; 0x7c <__bad_interrupt>
  4e:	00 00       	nop
  50:	15 c0       	rjmp	.+42     	; 0x7c <__bad_interrupt>
  52:	00 00       	nop
  54:	13 c0       	rjmp	.+38     	; 0x7c <__bad_interrupt>
  56:	00 00       	nop
  58:	11 c0       	rjmp	.+34     	; 0x7c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0f c0       	rjmp	.+30     	; 0x7c <__bad_interrupt>
  5e:	00 00       	nop
  60:	0d c0       	rjmp	.+26     	; 0x7c <__bad_interrupt>
  62:	00 00       	nop
  64:	0b c0       	rjmp	.+22     	; 0x7c <__bad_interrupt>
  66:	00 00       	nop
  68:	09 c0       	rjmp	.+18     	; 0x7c <__bad_interrupt>
	...

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0b d0       	rcall	.+22     	; 0x90 <main>
  7a:	11 c0       	rjmp	.+34     	; 0x9e <_exit>

0000007c <__bad_interrupt>:
  7c:	c1 cf       	rjmp	.-126    	; 0x0 <__vectors>

0000007e <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
  7e:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 62       	ori	r24, 0x20	; 32
  84:	8f 77       	andi	r24, 0x7F	; 127
  86:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
  88:	89 2f       	mov	r24, r25
  8a:	80 6a       	ori	r24, 0xA0	; 160
  8c:	85 b9       	out	0x05, r24	; 5
  8e:	08 95       	ret

00000090 <main>:
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */

#include <asf.h>
int main (void)
{
  90:	f6 df       	rcall	.-20     	; 0x7e <board_init>
  92:	1f 9b       	sbis	0x03, 7	; 3
  94:	02 c0       	rjmp	.+4      	; 0x9a <main+0xa>
  96:	2d 98       	cbi	0x05, 5	; 5
  98:	fc cf       	rjmp	.-8      	; 0x92 <main+0x2>
  9a:	2d 9a       	sbi	0x05, 5	; 5
  9c:	fa cf       	rjmp	.-12     	; 0x92 <main+0x2>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
