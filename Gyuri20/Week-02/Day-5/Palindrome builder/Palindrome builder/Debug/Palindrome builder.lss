
Palindrome builder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000003bc  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011c  0080011c  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a10  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089b  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f7  00000000  00000000  000017c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000495  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000168  00000000  00000000  00001ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002161  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	ec eb       	ldi	r30, 0xBC	; 188
  80:	f3 e0       	ldi	r31, 0x03	; 3
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 31       	cpi	r26, 0x1C	; 28
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	ac e1       	ldi	r26, 0x1C	; 28
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a2 32       	cpi	r26, 0x22	; 34
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  a2:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <UART_SendCharacter>:
	// Write this function, which can send a character through UART will polling method
	// See page 247 of the datasheet for hints, be aware that the code in the datasheet has a problem :)

	//TODO:
	// Wait for empty buffer
	while ( !( UCSR0A & (1<<UDRE0)) );
  aa:	e0 ec       	ldi	r30, 0xC0	; 192
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	95 ff       	sbrs	r25, 5
  b2:	fd cf       	rjmp	.-6      	; 0xae <UART_SendCharacter+0x4>

	//TODO:
	// Put data to buffer
	UDR0 = character;
  b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b8:	08 95       	ret

000000ba <UART_GetCharacter>:
	// Write this function, which waits for a character and returns when one is received
	// See page 249 of the datasheet for hints, be aware that the code in the datasheet has a problem :)

	//TODO:
	// Wait for data received
	while ( !(UCSR0A & (1<<RXC0)) );
  ba:	e0 ec       	ldi	r30, 0xC0	; 192
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 23       	and	r24, r24
  c2:	ec f7       	brge	.-6      	; 0xbe <UART_GetCharacter+0x4>

	//TODO:
	// Put data to buffer
	return UDR0;
  c4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  c8:	08 95       	ret

000000ca <polyndrom_function>:

#define F_CPU	16000000	// This definition tells to _delay_ms() that the CPU runs at 16MHz
#include <util/delay.h>		// This header contains the _delay_ms() function
#include <string.h>

void polyndrom_function(){
  ca:	cf 92       	push	r12
  cc:	df 92       	push	r13
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	64 97       	sbiw	r28, 0x14	; 20
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61

	char a[20];

	printf("Write something\n");
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 32 01 	call	0x264	; 0x264 <puts>

	gets(a);
  f2:	ce 01       	movw	r24, r28
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	7c 01       	movw	r14, r24
  f8:	0e 94 01 01 	call	0x202	; 0x202 <gets>

	
	int length;
	length = strlen(a);
  fc:	f7 01       	movw	r30, r14
  fe:	01 90       	ld	r0, Z+
 100:	00 20       	and	r0, r0
 102:	e9 f7       	brne	.-6      	; 0xfe <polyndrom_function+0x34>
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	8f 01       	movw	r16, r30
 108:	0e 19       	sub	r16, r14
 10a:	1f 09       	sbc	r17, r15
	int i;

	for(i = 0; i < length; i++)
 10c:	10 16       	cp	r1, r16
 10e:	11 06       	cpc	r1, r17
 110:	64 f4       	brge	.+24     	; 0x12a <polyndrom_function+0x60>
 112:	67 01       	movw	r12, r14
 114:	c0 0e       	add	r12, r16
 116:	d1 1e       	adc	r13, r17
	{
		printf("%c", a[i]);
 118:	f7 01       	movw	r30, r14
 11a:	81 91       	ld	r24, Z+
 11c:	7f 01       	movw	r14, r30
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 2b 01 	call	0x256	; 0x256 <putchar>
	
	int length;
	length = strlen(a);
	int i;

	for(i = 0; i < length; i++)
 124:	ec 14       	cp	r14, r12
 126:	fd 04       	cpc	r15, r13
 128:	b9 f7       	brne	.-18     	; 0x118 <polyndrom_function+0x4e>
	{
		printf("%c", a[i]);
	}


	for(i = length-1; i >= 0; i--)
 12a:	c8 01       	movw	r24, r16
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	72 f0       	brmi	.+28     	; 0x14c <polyndrom_function+0x82>
 130:	ce 01       	movw	r24, r28
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	08 0f       	add	r16, r24
 136:	19 1f       	adc	r17, r25
 138:	7c 01       	movw	r14, r24
	{
		printf("%c", a[i]);
 13a:	f8 01       	movw	r30, r16
 13c:	82 91       	ld	r24, -Z
 13e:	8f 01       	movw	r16, r30
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 2b 01 	call	0x256	; 0x256 <putchar>
	{
		printf("%c", a[i]);
	}


	for(i = length-1; i >= 0; i--)
 146:	0e 15       	cp	r16, r14
 148:	1f 05       	cpc	r17, r15
 14a:	b9 f7       	brne	.-18     	; 0x13a <polyndrom_function+0x70>
	{
		printf("%c", a[i]);
	}

}
 14c:	64 96       	adiw	r28, 0x14	; 20
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	ff 90       	pop	r15
 162:	ef 90       	pop	r14
 164:	df 90       	pop	r13
 166:	cf 90       	pop	r12
 168:	08 95       	ret

0000016a <UART_Init>:

	//TODO:
	// At first set the baud rate to 9600
	// The CPU clock frequency is 16MHz
	uint16_t ubbr = 103;
	UBRR0H = ubbr >> 8;
 16a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = ubbr;
 16e:	87 e6       	ldi	r24, 0x67	; 103
 170:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// Set the following frame format: 8N1
	// It is set to 8N1 by default

	//TODO:
	// Enable TX
	UCSR0B |= 1 << TXEN0;
 174:	e1 ec       	ldi	r30, 0xC1	; 193
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	80 83       	st	Z, r24

	//TODO:
	// Enable RX
	UCSR0B |= 1 << RXEN0;
 17e:	80 81       	ld	r24, Z
 180:	80 61       	ori	r24, 0x10	; 16
 182:	80 83       	st	Z, r24
 184:	08 95       	ret

00000186 <main>:
	//TODO:
	// Put data to buffer
	return UDR0;
}

int main(void) {
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	6c 97       	sbiw	r28, 0x1c	; 28
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
	char buffer[255];

	//Don't forget to call the init function :)
	UART_Init();
 19a:	0e 94 b5 00 	call	0x16a	; 0x16a <UART_Init>

	// Setting up STDIO input and output buffer
	// You don't have to understand this!
	//----- START OF STDIO IO BUFFER SETUP
	FILE UART_output = FDEV_SETUP_STREAM(UART_SendCharacter, NULL, _FDEV_SETUP_WRITE);
 19e:	8e e0       	ldi	r24, 0x0E	; 14
 1a0:	de 01       	movw	r26, r28
 1a2:	11 96       	adiw	r26, 0x01	; 1
 1a4:	fd 01       	movw	r30, r26
 1a6:	98 2f       	mov	r25, r24
 1a8:	11 92       	st	Z+, r1
 1aa:	9a 95       	dec	r25
 1ac:	e9 f7       	brne	.-6      	; 0x1a8 <main+0x22>
 1ae:	92 e0       	ldi	r25, 0x02	; 2
 1b0:	9c 83       	std	Y+4, r25	; 0x04
 1b2:	25 e5       	ldi	r18, 0x55	; 85
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	3a 87       	std	Y+10, r19	; 0x0a
 1b8:	29 87       	std	Y+9, r18	; 0x09
	stdout = &UART_output;
 1ba:	2c e1       	ldi	r18, 0x1C	; 28
 1bc:	31 e0       	ldi	r19, 0x01	; 1
 1be:	f9 01       	movw	r30, r18
 1c0:	b3 83       	std	Z+3, r27	; 0x03
 1c2:	a2 83       	std	Z+2, r26	; 0x02
	FILE UART_input = FDEV_SETUP_STREAM(NULL, UART_GetCharacter, _FDEV_SETUP_READ);
 1c4:	1e 96       	adiw	r26, 0x0e	; 14
 1c6:	fd 01       	movw	r30, r26
 1c8:	11 92       	st	Z+, r1
 1ca:	8a 95       	dec	r24
 1cc:	e9 f7       	brne	.-6      	; 0x1c8 <main+0x42>
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	8a 8b       	std	Y+18, r24	; 0x12
 1d2:	8d e5       	ldi	r24, 0x5D	; 93
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	9a 8f       	std	Y+26, r25	; 0x1a
 1d8:	89 8f       	std	Y+25, r24	; 0x19
	stdin = &UART_input;
 1da:	f9 01       	movw	r30, r18
 1dc:	b1 83       	std	Z+1, r27	; 0x01
 1de:	a0 83       	st	Z, r26
	//----- END OF STDIO IO BUFFER SETUP

	//TODO:
	// Try printf
	printf("Startup...\r\n");
 1e0:	80 e1       	ldi	r24, 0x10	; 16
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 32 01 	call	0x264	; 0x264 <puts>
	
		//TODO:
		// With gets and puts create a loopback, use the buffer variable!
		

		polyndrom_function();
 1e8:	0e 94 65 00 	call	0xca	; 0xca <polyndrom_function>
	
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	6c 96       	adiw	r28, 0x1c	; 28
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <gets>:
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <__data_end>
 20e:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <__data_end+0x1>
 212:	23 81       	ldd	r18, Z+3	; 0x03
 214:	20 fd       	sbrc	r18, 0
 216:	03 c0       	rjmp	.+6      	; 0x21e <gets+0x1c>
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	17 c0       	rjmp	.+46     	; 0x24c <gets+0x4a>
 21e:	c9 2f       	mov	r28, r25
 220:	d8 2f       	mov	r29, r24
 222:	08 2f       	mov	r16, r24
 224:	19 2f       	mov	r17, r25
 226:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 22a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 22e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <fgetc>
 232:	8f 3f       	cpi	r24, 0xFF	; 255
 234:	2f ef       	ldi	r18, 0xFF	; 255
 236:	92 07       	cpc	r25, r18
 238:	79 f3       	breq	.-34     	; 0x218 <gets+0x16>
 23a:	f8 01       	movw	r30, r16
 23c:	81 93       	st	Z+, r24
 23e:	8f 01       	movw	r16, r30
 240:	0a 97       	sbiw	r24, 0x0a	; 10
 242:	89 f7       	brne	.-30     	; 0x226 <gets+0x24>
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	10 82       	st	Z, r1
 248:	8d 2f       	mov	r24, r29
 24a:	9c 2f       	mov	r25, r28
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <putchar>:
 256:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <__data_end+0x2>
 25a:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <__data_end+0x3>
 25e:	0e 94 a0 01 	call	0x340	; 0x340 <fputc>
 262:	08 95       	ret

00000264 <puts>:
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <__data_end+0x2>
 270:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <__data_end+0x3>
 274:	23 81       	ldd	r18, Z+3	; 0x03
 276:	21 ff       	sbrs	r18, 1
 278:	1b c0       	rjmp	.+54     	; 0x2b0 <puts+0x4c>
 27a:	8c 01       	movw	r16, r24
 27c:	d0 e0       	ldi	r29, 0x00	; 0
 27e:	c0 e0       	ldi	r28, 0x00	; 0
 280:	f8 01       	movw	r30, r16
 282:	81 91       	ld	r24, Z+
 284:	8f 01       	movw	r16, r30
 286:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <__data_end+0x2>
 28a:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <__data_end+0x3>
 28e:	db 01       	movw	r26, r22
 290:	18 96       	adiw	r26, 0x08	; 8
 292:	ed 91       	ld	r30, X+
 294:	fc 91       	ld	r31, X
 296:	19 97       	sbiw	r26, 0x09	; 9
 298:	88 23       	and	r24, r24
 29a:	31 f0       	breq	.+12     	; 0x2a8 <puts+0x44>
 29c:	09 95       	icall
 29e:	89 2b       	or	r24, r25
 2a0:	79 f3       	breq	.-34     	; 0x280 <puts+0x1c>
 2a2:	df ef       	ldi	r29, 0xFF	; 255
 2a4:	cf ef       	ldi	r28, 0xFF	; 255
 2a6:	ec cf       	rjmp	.-40     	; 0x280 <puts+0x1c>
 2a8:	8a e0       	ldi	r24, 0x0A	; 10
 2aa:	09 95       	icall
 2ac:	89 2b       	or	r24, r25
 2ae:	19 f0       	breq	.+6      	; 0x2b6 <puts+0x52>
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	9f ef       	ldi	r25, 0xFF	; 255
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <puts+0x56>
 2b6:	8d 2f       	mov	r24, r29
 2b8:	9c 2f       	mov	r25, r28
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	08 95       	ret

000002c4 <fgetc>:
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	ec 01       	movw	r28, r24
 2ca:	2b 81       	ldd	r18, Y+3	; 0x03
 2cc:	20 ff       	sbrs	r18, 0
 2ce:	33 c0       	rjmp	.+102    	; 0x336 <fgetc+0x72>
 2d0:	26 ff       	sbrs	r18, 6
 2d2:	0a c0       	rjmp	.+20     	; 0x2e8 <fgetc+0x24>
 2d4:	2f 7b       	andi	r18, 0xBF	; 191
 2d6:	2b 83       	std	Y+3, r18	; 0x03
 2d8:	8e 81       	ldd	r24, Y+6	; 0x06
 2da:	9f 81       	ldd	r25, Y+7	; 0x07
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	9f 83       	std	Y+7, r25	; 0x07
 2e0:	8e 83       	std	Y+6, r24	; 0x06
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	29 c0       	rjmp	.+82     	; 0x33a <fgetc+0x76>
 2e8:	22 ff       	sbrs	r18, 2
 2ea:	0f c0       	rjmp	.+30     	; 0x30a <fgetc+0x46>
 2ec:	e8 81       	ld	r30, Y
 2ee:	f9 81       	ldd	r31, Y+1	; 0x01
 2f0:	80 81       	ld	r24, Z
 2f2:	08 2e       	mov	r0, r24
 2f4:	00 0c       	add	r0, r0
 2f6:	99 0b       	sbc	r25, r25
 2f8:	00 97       	sbiw	r24, 0x00	; 0
 2fa:	19 f4       	brne	.+6      	; 0x302 <fgetc+0x3e>
 2fc:	20 62       	ori	r18, 0x20	; 32
 2fe:	2b 83       	std	Y+3, r18	; 0x03
 300:	1a c0       	rjmp	.+52     	; 0x336 <fgetc+0x72>
 302:	31 96       	adiw	r30, 0x01	; 1
 304:	f9 83       	std	Y+1, r31	; 0x01
 306:	e8 83       	st	Y, r30
 308:	0e c0       	rjmp	.+28     	; 0x326 <fgetc+0x62>
 30a:	ea 85       	ldd	r30, Y+10	; 0x0a
 30c:	fb 85       	ldd	r31, Y+11	; 0x0b
 30e:	09 95       	icall
 310:	97 ff       	sbrs	r25, 7
 312:	09 c0       	rjmp	.+18     	; 0x326 <fgetc+0x62>
 314:	2b 81       	ldd	r18, Y+3	; 0x03
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	11 f0       	breq	.+4      	; 0x31e <fgetc+0x5a>
 31a:	80 e2       	ldi	r24, 0x20	; 32
 31c:	01 c0       	rjmp	.+2      	; 0x320 <fgetc+0x5c>
 31e:	80 e1       	ldi	r24, 0x10	; 16
 320:	82 2b       	or	r24, r18
 322:	8b 83       	std	Y+3, r24	; 0x03
 324:	08 c0       	rjmp	.+16     	; 0x336 <fgetc+0x72>
 326:	2e 81       	ldd	r18, Y+6	; 0x06
 328:	3f 81       	ldd	r19, Y+7	; 0x07
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	3f 83       	std	Y+7, r19	; 0x07
 330:	2e 83       	std	Y+6, r18	; 0x06
 332:	99 27       	eor	r25, r25
 334:	02 c0       	rjmp	.+4      	; 0x33a <fgetc+0x76>
 336:	8f ef       	ldi	r24, 0xFF	; 255
 338:	9f ef       	ldi	r25, 0xFF	; 255
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <fputc>:
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	fb 01       	movw	r30, r22
 34a:	23 81       	ldd	r18, Z+3	; 0x03
 34c:	21 fd       	sbrc	r18, 1
 34e:	03 c0       	rjmp	.+6      	; 0x356 <fputc+0x16>
 350:	8f ef       	ldi	r24, 0xFF	; 255
 352:	9f ef       	ldi	r25, 0xFF	; 255
 354:	2c c0       	rjmp	.+88     	; 0x3ae <fputc+0x6e>
 356:	22 ff       	sbrs	r18, 2
 358:	16 c0       	rjmp	.+44     	; 0x386 <fputc+0x46>
 35a:	46 81       	ldd	r20, Z+6	; 0x06
 35c:	57 81       	ldd	r21, Z+7	; 0x07
 35e:	24 81       	ldd	r18, Z+4	; 0x04
 360:	35 81       	ldd	r19, Z+5	; 0x05
 362:	42 17       	cp	r20, r18
 364:	53 07       	cpc	r21, r19
 366:	44 f4       	brge	.+16     	; 0x378 <fputc+0x38>
 368:	a0 81       	ld	r26, Z
 36a:	b1 81       	ldd	r27, Z+1	; 0x01
 36c:	9d 01       	movw	r18, r26
 36e:	2f 5f       	subi	r18, 0xFF	; 255
 370:	3f 4f       	sbci	r19, 0xFF	; 255
 372:	31 83       	std	Z+1, r19	; 0x01
 374:	20 83       	st	Z, r18
 376:	8c 93       	st	X, r24
 378:	26 81       	ldd	r18, Z+6	; 0x06
 37a:	37 81       	ldd	r19, Z+7	; 0x07
 37c:	2f 5f       	subi	r18, 0xFF	; 255
 37e:	3f 4f       	sbci	r19, 0xFF	; 255
 380:	37 83       	std	Z+7, r19	; 0x07
 382:	26 83       	std	Z+6, r18	; 0x06
 384:	14 c0       	rjmp	.+40     	; 0x3ae <fputc+0x6e>
 386:	8b 01       	movw	r16, r22
 388:	ec 01       	movw	r28, r24
 38a:	fb 01       	movw	r30, r22
 38c:	00 84       	ldd	r0, Z+8	; 0x08
 38e:	f1 85       	ldd	r31, Z+9	; 0x09
 390:	e0 2d       	mov	r30, r0
 392:	09 95       	icall
 394:	89 2b       	or	r24, r25
 396:	e1 f6       	brne	.-72     	; 0x350 <fputc+0x10>
 398:	d8 01       	movw	r26, r16
 39a:	16 96       	adiw	r26, 0x06	; 6
 39c:	8d 91       	ld	r24, X+
 39e:	9c 91       	ld	r25, X
 3a0:	17 97       	sbiw	r26, 0x07	; 7
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	17 96       	adiw	r26, 0x07	; 7
 3a6:	9c 93       	st	X, r25
 3a8:	8e 93       	st	-X, r24
 3aa:	16 97       	sbiw	r26, 0x06	; 6
 3ac:	ce 01       	movw	r24, r28
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	08 95       	ret

000003b8 <_exit>:
 3b8:	f8 94       	cli

000003ba <__stop_program>:
 3ba:	ff cf       	rjmp	.-2      	; 0x3ba <__stop_program>
