
MCU UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000294  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010c  0080010c  00000334  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a1  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000857  00000000  00000000  00000d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a1  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001878  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044d  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001d75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e4 e9       	ldi	r30, 0x94	; 148
  80:	f2 e0       	ldi	r31, 0x02	; 2
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 30       	cpi	r26, 0x0C	; 12
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	ac e0       	ldi	r26, 0x0C	; 12
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a2 31       	cpi	r26, 0x12	; 18
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  a2:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <UART_send_character>:
	// Write this function, which can send a character through UART will polling method
	// See page 247 of the datasheet for hints, be aware that the code in the datasheet has a problem :)

	//TODO:
	// Wait for empty buffer
	while ( !( UCSR0A & (1 << UDRE0)) );
  aa:	e0 ec       	ldi	r30, 0xC0	; 192
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	95 ff       	sbrs	r25, 5
  b2:	fd cf       	rjmp	.-6      	; 0xae <UART_send_character+0x4>

	//TODO:
	// Put data to buffer
	UDR0 = character;
  b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b8:	08 95       	ret

000000ba <UART_get_character>:
	// Write this function, which waits for a character and returns when one is received
	// See page 249 of the datasheet for hints, be aware that the code in the datasheet has a problem :)

	//TODO:
	// Wait for data received
	while ( !(UCSR0A & (1 << RXC0)) );
  ba:	e0 ec       	ldi	r30, 0xC0	; 192
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 23       	and	r24, r24
  c2:	ec f7       	brge	.-6      	; 0xbe <UART_get_character+0x4>

	//TODO:
	// Put data to buffer
	return UDR0;
  c4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  c8:	08 95       	ret

000000ca <UART_init>:

	//TODO:
	// At first set the baud rate to 9600
	// The CPU clock frequency is 16MHz
	uint16_t ubbr = 103;
	UBRR0H = ubbr >> 8;
  ca:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = ubbr;
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// Set the following frame format: 8N1
	// It is set to 8N1 by default

	//TODO:
	// Enable TX
	UCSR0B |= 1 << TXEN0;
  d4:	e1 ec       	ldi	r30, 0xC1	; 193
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 83       	st	Z, r24

	//TODO:
	// Enable RX
	UCSR0B |= 1 << RXEN0;
  de:	80 81       	ld	r24, Z
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <main>:
	// Put data to buffer
	return UDR0;
}

int main(void)
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	cb 51       	subi	r28, 0x1B	; 27
  f0:	d1 40       	sbci	r29, 0x01	; 1
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
	char buffer[255];

	//Don't forget to call the init function :)
	UART_init();
  fc:	0e 94 65 00 	call	0xca	; 0xca <UART_init>

	// Setting up STDIO input and output buffer
	// You don't have to understand this!
	//----- START OF STDIO IO BUFFER SETUP
	FILE UART_output = FDEV_SETUP_STREAM(UART_send_character, NULL, _FDEV_SETUP_WRITE);
 100:	fe 01       	movw	r30, r28
 102:	f3 95       	inc	r31
 104:	8e e0       	ldi	r24, 0x0E	; 14
 106:	df 01       	movw	r26, r30
 108:	98 2f       	mov	r25, r24
 10a:	1d 92       	st	X+, r1
 10c:	9a 95       	dec	r25
 10e:	e9 f7       	brne	.-6      	; 0x10a <main+0x24>
 110:	92 e0       	ldi	r25, 0x02	; 2
 112:	93 83       	std	Z+3, r25	; 0x03
 114:	25 e5       	ldi	r18, 0x55	; 85
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	31 87       	std	Z+9, r19	; 0x09
 11a:	20 87       	std	Z+8, r18	; 0x08
	stdout = &UART_output;
 11c:	2c e0       	ldi	r18, 0x0C	; 12
 11e:	31 e0       	ldi	r19, 0x01	; 1
 120:	d9 01       	movw	r26, r18
 122:	13 96       	adiw	r26, 0x03	; 3
 124:	fc 93       	st	X, r31
 126:	ee 93       	st	-X, r30
 128:	12 97       	sbiw	r26, 0x02	; 2
	FILE UART_input = FDEV_SETUP_STREAM(NULL, UART_get_character, _FDEV_SETUP_READ);
 12a:	3e 96       	adiw	r30, 0x0e	; 14
 12c:	df 01       	movw	r26, r30
 12e:	1d 92       	st	X+, r1
 130:	8a 95       	dec	r24
 132:	e9 f7       	brne	.-6      	; 0x12e <main+0x48>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	83 83       	std	Z+3, r24	; 0x03
 138:	8d e5       	ldi	r24, 0x5D	; 93
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	93 87       	std	Z+11, r25	; 0x0b
 13e:	82 87       	std	Z+10, r24	; 0x0a
	stdin = &UART_input;
 140:	d9 01       	movw	r26, r18
 142:	ed 93       	st	X+, r30
 144:	fc 93       	st	X, r31
	//----- END OF STDIO IO BUFFER SETUP

	//TODO:
	// Try printf
	printf("Startup...\r\n");
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <puts>

	// Loop that runs forever
	while (1) {
		//TODO:
		// With gets and puts create a loopback, use the buffer variable!
		gets(buffer);
 14e:	ce 01       	movw	r24, r28
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	0e 94 b0 00 	call	0x160	; 0x160 <gets>
		puts(buffer);
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <puts>
 15e:	f7 cf       	rjmp	.-18     	; 0x14e <main+0x68>

00000160 <gets>:
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 16c:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__data_end+0x1>
 170:	23 81       	ldd	r18, Z+3	; 0x03
 172:	20 fd       	sbrc	r18, 0
 174:	03 c0       	rjmp	.+6      	; 0x17c <gets+0x1c>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	17 c0       	rjmp	.+46     	; 0x1aa <gets+0x4a>
 17c:	c9 2f       	mov	r28, r25
 17e:	d8 2f       	mov	r29, r24
 180:	08 2f       	mov	r16, r24
 182:	19 2f       	mov	r17, r25
 184:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 188:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 18c:	0e 94 0a 01 	call	0x214	; 0x214 <fgetc>
 190:	8f 3f       	cpi	r24, 0xFF	; 255
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	92 07       	cpc	r25, r18
 196:	79 f3       	breq	.-34     	; 0x176 <gets+0x16>
 198:	f8 01       	movw	r30, r16
 19a:	81 93       	st	Z+, r24
 19c:	8f 01       	movw	r16, r30
 19e:	0a 97       	sbiw	r24, 0x0a	; 10
 1a0:	89 f7       	brne	.-30     	; 0x184 <gets+0x24>
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	10 82       	st	Z, r1
 1a6:	8d 2f       	mov	r24, r29
 1a8:	9c 2f       	mov	r25, r28
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <puts>:
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end+0x2>
 1c0:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__data_end+0x3>
 1c4:	23 81       	ldd	r18, Z+3	; 0x03
 1c6:	21 ff       	sbrs	r18, 1
 1c8:	1b c0       	rjmp	.+54     	; 0x200 <puts+0x4c>
 1ca:	8c 01       	movw	r16, r24
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	f8 01       	movw	r30, r16
 1d2:	81 91       	ld	r24, Z+
 1d4:	8f 01       	movw	r16, r30
 1d6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end+0x2>
 1da:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <__data_end+0x3>
 1de:	db 01       	movw	r26, r22
 1e0:	18 96       	adiw	r26, 0x08	; 8
 1e2:	ed 91       	ld	r30, X+
 1e4:	fc 91       	ld	r31, X
 1e6:	19 97       	sbiw	r26, 0x09	; 9
 1e8:	88 23       	and	r24, r24
 1ea:	31 f0       	breq	.+12     	; 0x1f8 <puts+0x44>
 1ec:	09 95       	icall
 1ee:	89 2b       	or	r24, r25
 1f0:	79 f3       	breq	.-34     	; 0x1d0 <puts+0x1c>
 1f2:	df ef       	ldi	r29, 0xFF	; 255
 1f4:	cf ef       	ldi	r28, 0xFF	; 255
 1f6:	ec cf       	rjmp	.-40     	; 0x1d0 <puts+0x1c>
 1f8:	8a e0       	ldi	r24, 0x0A	; 10
 1fa:	09 95       	icall
 1fc:	89 2b       	or	r24, r25
 1fe:	19 f0       	breq	.+6      	; 0x206 <puts+0x52>
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	9f ef       	ldi	r25, 0xFF	; 255
 204:	02 c0       	rjmp	.+4      	; 0x20a <puts+0x56>
 206:	8d 2f       	mov	r24, r29
 208:	9c 2f       	mov	r25, r28
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	08 95       	ret

00000214 <fgetc>:
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
 21a:	2b 81       	ldd	r18, Y+3	; 0x03
 21c:	20 ff       	sbrs	r18, 0
 21e:	33 c0       	rjmp	.+102    	; 0x286 <fgetc+0x72>
 220:	26 ff       	sbrs	r18, 6
 222:	0a c0       	rjmp	.+20     	; 0x238 <fgetc+0x24>
 224:	2f 7b       	andi	r18, 0xBF	; 191
 226:	2b 83       	std	Y+3, r18	; 0x03
 228:	8e 81       	ldd	r24, Y+6	; 0x06
 22a:	9f 81       	ldd	r25, Y+7	; 0x07
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	9f 83       	std	Y+7, r25	; 0x07
 230:	8e 83       	std	Y+6, r24	; 0x06
 232:	8a 81       	ldd	r24, Y+2	; 0x02
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	29 c0       	rjmp	.+82     	; 0x28a <fgetc+0x76>
 238:	22 ff       	sbrs	r18, 2
 23a:	0f c0       	rjmp	.+30     	; 0x25a <fgetc+0x46>
 23c:	e8 81       	ld	r30, Y
 23e:	f9 81       	ldd	r31, Y+1	; 0x01
 240:	80 81       	ld	r24, Z
 242:	08 2e       	mov	r0, r24
 244:	00 0c       	add	r0, r0
 246:	99 0b       	sbc	r25, r25
 248:	00 97       	sbiw	r24, 0x00	; 0
 24a:	19 f4       	brne	.+6      	; 0x252 <fgetc+0x3e>
 24c:	20 62       	ori	r18, 0x20	; 32
 24e:	2b 83       	std	Y+3, r18	; 0x03
 250:	1a c0       	rjmp	.+52     	; 0x286 <fgetc+0x72>
 252:	31 96       	adiw	r30, 0x01	; 1
 254:	f9 83       	std	Y+1, r31	; 0x01
 256:	e8 83       	st	Y, r30
 258:	0e c0       	rjmp	.+28     	; 0x276 <fgetc+0x62>
 25a:	ea 85       	ldd	r30, Y+10	; 0x0a
 25c:	fb 85       	ldd	r31, Y+11	; 0x0b
 25e:	09 95       	icall
 260:	97 ff       	sbrs	r25, 7
 262:	09 c0       	rjmp	.+18     	; 0x276 <fgetc+0x62>
 264:	2b 81       	ldd	r18, Y+3	; 0x03
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	11 f0       	breq	.+4      	; 0x26e <fgetc+0x5a>
 26a:	80 e2       	ldi	r24, 0x20	; 32
 26c:	01 c0       	rjmp	.+2      	; 0x270 <fgetc+0x5c>
 26e:	80 e1       	ldi	r24, 0x10	; 16
 270:	82 2b       	or	r24, r18
 272:	8b 83       	std	Y+3, r24	; 0x03
 274:	08 c0       	rjmp	.+16     	; 0x286 <fgetc+0x72>
 276:	2e 81       	ldd	r18, Y+6	; 0x06
 278:	3f 81       	ldd	r19, Y+7	; 0x07
 27a:	2f 5f       	subi	r18, 0xFF	; 255
 27c:	3f 4f       	sbci	r19, 0xFF	; 255
 27e:	3f 83       	std	Y+7, r19	; 0x07
 280:	2e 83       	std	Y+6, r18	; 0x06
 282:	99 27       	eor	r25, r25
 284:	02 c0       	rjmp	.+4      	; 0x28a <fgetc+0x76>
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	9f ef       	ldi	r25, 0xFF	; 255
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
